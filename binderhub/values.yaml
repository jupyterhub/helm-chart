resources:
  requests:
    cpu: 0.2
    memory: 512Mi

image:
  name: jupyterhub/k8s-binderhub
  tag: v268761c

repo2dockerImage: jupyter/repo2docker:v0.4.1

googleAnalyticsCode: null

registry:
  enabled: false
  prefix: binderhub-local/
  host: gcr.io
  username: _json_key
  password: null

service:
  type: LoadBalancer
  nodePort: null

hub:
  url: null

jupyterhub:
  hub:
    extraConfig: |
      # disable login (users created exclusively via API)
      c.JupyterHub.authenticator_class = 'nullauthenticator.NullAuthenticator'

      # image & token are set via spawn options
      from kubespawner import KubeSpawner

      class BinderSpawner(KubeSpawner):
        def get_args(self):
            return [
                '--ip=0.0.0.0',
                '--port=%i' % self.port,
                '--NotebookApp.base_url=%s' % self.server.base_url,
                '--NotebookApp.token=%s' % self.user_options['token'],
            ] + self.args

        def start(self):
            if 'token' not in self.user_options:
              raise web.HTTPError(400, "token required")
            if 'image' not in self.user_options:
              raise web.HTTPError(400, "image required")

            self.singleuser_image_spec = self.user_options['image']
            return super().start()

      c.JupyterHub.spawner_class = BinderSpawner

    services:
      binder:
        admin: true
        apiToken: null

  singleuser:
    # start jupyter notebook
    cmd: jupyter-notebook
    storage:
      type: none
    memory:
      guarantee: null
  prePuller:
    enabled: false

deployment:
  labels: {}

ingress:
  enabled: false
  hosts:
    - chart-example.local
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: {}
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
